<template>
  <div style="padding: 30px">
    <RelationMatrixTable :relationList="relationList" :treeData="treeData" :headerData="headerData" :data="data"></RelationMatrixTable>
  </div>
</template>
<script>
import { <%= horizontal.tableCode%>Service, <%= vertical.tableCode%>Service, <%= rel.tableCode%>Service } from '@/services'
import { QueryConditionBuilder } from '@/utils/queryConditionBuilder'
import { listToTree } from '@/utils/treeTool'
import RelationMatrixTable from '@/components/matrixTable/RelationMatrixTable.vue'
export default {
  name: '<%= pageName%>',
  components: {
    RelationMatrixTable,
  },
  data() {
    return {
      treeData: [],
      headerData: [],
      data: [],
      relationList: [
        {
          id: 'guanxi1',
          name: '关系1',
          icon: 'el-icon-sunny',
        },
        {
          id: 'guanxi2',
          name: '关系2',
          icon: 'el-icon-sunset',
        }
      ],
    }
  },
  mounted() {
    this.initData()
  },
  methods: {
    getQueryCondition(){
      const queryCondition = QueryConditionBuilder.getInstanceNoPage()
      queryCondition.buildEqualQuery('bindProject','')
      return queryCondition
    },
    async getHeaderData(){
      const { data } = await <%= horizontal.tableCode%>Service.query<%= horizontal.tableCode%>ByCondition(this.getQueryCondition())
      const list = data.map(item=>{
        return {
          ...item,
          id:item.<%= horizontal.uniqueCode%>,
          name:item.<%= horizontal.displayName%>
        }
      })
      this.headerData = listToTree(list, { pidKey: <%= horizontal.parentCode%> })
    },
    getTreeData(){
      const { data } = await <%= vertical.tableCode%>Service.query<%= vertical.tableCode%>ByCondition(this.getQueryCondition())
      const list = data.map(item=>{
        return {
          ...item,
          id:item.<%= vertical.uniqueCode%>,
          name:item.<%= vertical.displayName%>
        }
      })
      this.treeData = listToTree(list, { pidKey: <%= vertical.parentCode%> })
    },
    getData(){
      const { data } = await <%= rel.tableCode%>Service.query<%= rel.tableCode%>ByCondition(this.getQueryCondition())
      this.data = data.map(item=>{
        return {
          ...item,
          from:item.<%= horizontal.uniqueCode%>,
          to:item.<%= vertical.uniqueCode%>,
          value:item.<%= rel.relCode%>
        }
      })
    },
    initData() {
      Promise.all([this.getHeaderData,this.getTreeData,this.getData])
    },
  },
}
</script>
