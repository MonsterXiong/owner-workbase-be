<template>
  <div class="common-page" ref="taskAnalysisOutputRef">
    <splitpanes class="default-theme" @resize="onResize">
      <pane class="main" :size="mainWidth">
        <TaskOrgDiagram
          :cw="cw"
          :ch="ch"
          :textList="textList"
          :defaultAngle="defaultAngle"
          :nodeTemplate="nodeTemplate"
          :saveMode="saveMode"
          :addToolList="addToolList"
          :addNodeConfig="addNodeConfig"
          :nodeList="nodeList"
          @addNode="addNode"
          @deleteNode="deleteNode"
          @updateNode="updateNode"
          @saveDiagram="saveDiagramData"
          @setCurrentNodeData="setCurrentNodeData"
        />
      </pane>
      <pane
        class="right-side"
        :size="rightWidth"
        :maxSize="35"
        :min-size="20"
        v-if="currentNodeData"
      >
        <EditPanel
          :currentNodeData="currentNodeData || {}"
          :curNodeType="curNodeType"
          @submitFormData="submitFormData"
        />
      </pane>
    </splitpanes>
  </div>
</template>

<script>
import { Splitpanes, Pane } from "splitpanes";
import "splitpanes/dist/splitpanes.css";
import EditPanel from "./components/EditPanel.vue";
import TaskOrgDiagram from "./components/TaskOrgDiagram.vue";
import { mapState } from "vuex";
import {
  AddNodeConfig,
  AddNodeConfigCode,
  MissionData,
  TaskData,
} from "./mockData";
export default {
  name: '<%= pageName%>',
  data() {
    return {
      isShowRightSide: true,
      mainWidth: 80,
      rightWidth: 20,
      nodeList: [],
      textList: [
        { code: "target", title: "任务目标" },
        { code: "time", title: "时间" },
        { code: "areaName", title: "区域" },
        { code: "remark", title: "描述" },
      ],
      saveMode: "monitor", //save【批量保存】 、 monitor【实时监听】 两种模式
      nodeTemplate: null, //nodeTemplate(), 传了nodeTemplate的情况下默认渲染nodeTemplate
      addToolList: [
        // 添加按钮替换  为空数组是toolbar显示默认添加，有数据的情况替换toolbar的默认添加展示 addTemplateCode为添加节点的类型，code对应addNodeConfig数据
        {
          name: "添加使命",
          code: "add",
          icon: "el-icon-circle-plus-outline",
          addTemplateCode: AddNodeConfigCode.MISSION,
        },
        {
          name: "添加任务",
          code: "add",
          icon: "el-icon-circle-plus-outline",
          addTemplateCode: AddNodeConfigCode.TASK,
        },
      ],
      defaultAngle: 0,
      addNodeConfig: AddNodeConfig,
      cw: 0, //当前页面的宽
      ch: 0, //当前页面的高
      currentNodeData: null,
      missionList: [],
      taskList: [],
      curNodeType: "",
    };
  },
  computed: {
    ...mapState("setting", ["isCollapseGuidance"]),
  },
  watch: {
    isCollapseGuidance: {
      handler() {
        setTimeout(() => {
          this.getCurrentClient();
        }, 300);
      },
      immediate: true,
    },
  },
  mounted() {
    this.init();
  },
  methods: {
    async init() {
      // 页面初始化
      await this.getMission();
      await this.getTask();
      this.setNodeList();
    },
    // 获取当前视图的宽高
    getCurrentClient() {
      this.cw = this.$refs.taskAnalysisOutputRef.clientWidth;
      this.ch = this.$refs.taskAnalysisOutputRef.clientHeight;
      this.setPanelWidth();
    },
    // 节点数据组装
    setNodeList() {
      let arr = [];
      this.missionList.map((ele) => {
        arr.push({
          id: ele.missionId,
          name: ele.missionName,
          parentId: "",
          properties: {
            ...ele,
          },
          sortValue: ele?.sortValue || 0, //排序
          _type: ele._type || "default", //颜色
          tag: "使命", //标签
        });
      });
      this.taskList.map((ele, index) => {
        arr.push({
          id: ele.taskId,
          name: ele.taskName,
          parentId: ele.parentId,
          properties: {
            ...ele,
          },
          sortValue: ele?.sortValue || index + 1, //排序
          _type: ele._type || "default", //颜色
          tag: ele.taskName, //标签
        });
      });
      this.nodeList = [...arr];
    },
    // 获取使命数据
    getMission() {
      this.missionList = [...MissionData];
    },
    // 获取任务数据
    getTask() {
      this.taskList = [...TaskData];
    },
    // 页面布局变化
    onResize() {
      console.log("resize事件");
    },
    saveDiagramData(nodeDataArray) {
      console.log("saveDiagramData", nodeDataArray);
    },
    addNode(params) {
      // 新增节点 节点数据
      console.log("新增节点", params);
    },
    deleteNode(delIdList) {
      // 删除节点 删除节点id数组
      console.log("删除节点", delIdList);
    },
    updateNode(updateNodes) {
      // 更新节点 节点数据
      console.log("更新节点数据", updateNodes);
    },
    setCurrentNodeData(data) {
      this.currentNodeData = data || null;
      this.setCurNodeType();
      console.log("当前选中节点", data);
      this.setPanelWidth();
    },
    setPanelWidth() {
      if (this.currentNodeData) {
        this.mainWidth = 80;
        this.rightWidth = 20;
      } else {
        this.mainWidth = 100;
        this.rightWidth = 0;
      }
    },
    setCurNodeType() {
      if (!this.currentNodeData.id) {
        this.curNodeType = "";
        return;
      }
      if (!this.currentNodeData.parentId) {
        this.curNodeType = "mission";
      } else {
        this.curNodeType = "task";
      }
    },
    submitFormData(formData) {
      // 保存节点属性
      if (this.curNodeType == "task") {
        // todo 接口联调
        // 任务数据
        this.$emitter.emit("updateActiveNodeData", {
          properties: formData,
          name: formData.taskName,
          tag: formData.taskName,
        });
      } else {
        // todo 接口联调
        // 使命数据
        this.$emitter.emit("updateActiveNodeData", {
          properties: formData,
          name: formData.missionName,
        });
      }
    },
  },
  components: { Splitpanes, Pane, EditPanel, TaskOrgDiagram },
};
</script>

<style lang="less" scoped></style>
