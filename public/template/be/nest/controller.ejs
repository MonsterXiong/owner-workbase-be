import {
  Controller,
  Post,
  Body,
  Query,
  UploadedFile,
  UseInterceptors,
  Res,
} from '@nestjs/common';
import { <%= TableName %>Service } from './<%= tableName%>.service';
import { ApiTags, ApiOperation, ApiConsumes, ApiBody } from '@nestjs/swagger';
import { <%= TableName %> } from './<%= tableName%>.entity';
import { FileInterceptor } from '@nestjs/platform-express';
import { Response } from 'express';
import * as xlsx from 'xlsx';
import { QueryDto } from '@/common/query.dto';
import { nanoid } from "nanoid";

@ApiTags('<%= tableComment %>接口')
@Controller('/<%= ApiPrefix %>/<%= tableName%>')
export class <%= TableName %>Controller {
  constructor(private readonly <%= tableName%>Service: <%= TableName %>Service) {}

  @Post('delete<%= TableName %>Batch')
  @ApiOperation({ summary: '删除<%= tableComment %>(批量、递归)' })
  delete<%= TableName %>Batch(@Body() <%= primaryKey %>List: string[]) {
    return this.<%= tableName%>Service.deleteBatch(<%= primaryKey %>List);
  }

  @Post('download<%= TableName %>Template')
  @ApiOperation({ summary: '导出<%= tableComment %>模板下载' })
  async download<%= TableName %>Template(@Res() res: Response): Promise<void> {
    const data = await this.<%= tableName%>Service.findAll();
    const firstData = data[0];
    const fileName = '<%= TableName %>_template.xlsx';
    const result = {};
    Object.keys(firstData).forEach((key) => {
      result[key] = null;
    });
    return this.<%= tableName%>Service.exportExcel([result], res, fileName);
  }

  @Post('export<%= TableName %>')
  @ApiOperation({ summary: '导出<%= tableComment %>' })
  async export<%= TableName %>(@Res() res: Response): Promise<void> {
    const fileName = '<%= TableName %>.xlsx';
    const data = await this.<%= tableName%>Service.findAll();
    return this.<%= tableName%>Service.exportExcel(data, res, fileName);
  }

  @Post('get<%= TableName %>')
  @ApiOperation({ summary: '获取<%= tableComment %>' })
  get<%= TableName %>(@Query('<%= primaryKey %>') <%= primaryKey %>: string) {
    return this.<%= tableName%>Service.getItem(<%= primaryKey %>);
  }

  @Post('import<%= TableName %>')
  @ApiOperation({ summary: '导入<%= tableComment %>' })
  @UseInterceptors(FileInterceptor('file'))
  @ApiOperation({ summary: '文件上传,返回 url 地址' })
  @ApiConsumes('multipart/form-data')
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        file: {
          description: '文件',
          type: 'string',
          format: 'binary',
        },
      },
    },
  })
  import<%= TableName %>(@UploadedFile() file: Express.Multer.File) {
    // const reader = new FileReader();
    // reader.onload = function (event) {
      //   var data = event.target.result;
      //   var workbook = xlsx.read(data, { type: 'binary' });
      //   // 读取第一个工作表的所有数据
      //   var sheet1 = workbook.Sheets[workbook.SheetNames[0]];
      //   var rows = xlsx.utils.sheet_to_json(sheet1);
      //   // 处理读取出来的数据
      //   console.log(rows);
      // };
      // console.log(file);
    // reader.readAsBinaryString(file);
    // 导入
    return 1;
  }

  @Post('insert<%= TableName %>')
  @ApiOperation({ summary: '增加<%= tableComment %>' })
  insert<%= TableName %>(@Body() entity: <%= TableName %>) {
    return this.<%= tableName%>Service.insert(entity);
  }

  @Post('insert<%= TableName %>Batch')
  @ApiOperation({ summary: '增加<%= tableComment %>(批量)' })
  insert<%= TableName %>Batch(@Body() entity: <%= TableName %>[]) {
    return this.<%= tableName%>Service.insertBatch(entity);
  }

  @Post('query<%= TableName %>')
  @ApiOperation({ summary: '查询<%= tableComment %>列表结果' })
  query<%= TableName %>(@Body() condition:QueryDto) {
    return this.<%= tableName%>Service.queryList(condition)
  }

  @Post('save<%= TableName %>')
  @ApiOperation({ summary: '保存<%= tableComment %>' })
  save<%= TableName %>(@Body() entity: <%= TableName %>) {
    if(!entity.<%= primaryKey %>){
      entity.<%= primaryKey %> = nanoid()
    }
    return this.<%= tableName%>Service.save(entity);
  }

  @Post('save<%= TableName %>Batch')
  @ApiOperation({ summary: '保存<%= tableComment %>(批量)' })
  save<%= TableName %>Batch(@Body() entity: <%= TableName %>[]) {
    entity.forEach(entityItem=>{
      if(!entityItem.<%= primaryKey %>){
        entityItem.<%= primaryKey %> = nanoid()
      }
    })
    return this.<%= tableName%>Service.saveBatch(entity);
  }

  @Post('update<%= TableName %>')
  @ApiOperation({ summary: '修改<%= tableComment %>' })
  update<%= TableName %>(@Body() entity: <%= TableName %>) {
    return this.<%= tableName%>Service.update(entity);
  }

  @Post('update<%= TableName %>Batch')
  @ApiOperation({ summary: '修改<%= tableComment %>(批量)' })
  update<%= TableName %>Batch(@Body() entity: <%= TableName %>[]) {
    return this.<%= tableName%>Service.updateBatch(entity);
  }
}
